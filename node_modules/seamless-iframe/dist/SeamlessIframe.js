"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeamlessIframe = void 0;
const react_1 = __importStar(require("react"));
const getStylesheetElements_1 = require("./getStylesheetElements");
const getResizeScript_1 = require("./getResizeScript");
const constants_1 = require("./constants");
const getListenToLinksScript_1 = require("./getListenToLinksScript");
const getInterceptNavigationScript_1 = require("./getInterceptNavigationScript");
const onLinkMessagePosted = (url) => {
    if (window.confirm(`Are you sure you want to open "${url}"?`)) {
        window.open(url, "_blank", "noopener noreferrer");
    }
};
const wrapInScript = (script) => `<script>${script}</script>`;
const wrapInStyle = (style) => `<style>${style}</style>`;
const SeamlessIframe = (props) => {
    const { inheritParentStyle, customStyle, customOuterStyleObject, sanitizedHtml, customScript, interceptLinkClicks, preventIframeNavigation, customLinkClickCallback, customIframeNavigationInterceptedView, title, heightCorrection, } = props;
    const [height, setHeight] = react_1.useState(0);
    const [iframeUnloadPreventState, setIframeUnloadPreventState] = react_1.useState({
        preventing: false,
        buffering: false,
    });
    const [id] = react_1.useState(Math.random());
    const parentStyleTags = inheritParentStyle ? getStylesheetElements_1.getStylesheetElements() : "";
    const styleTag = customStyle ? wrapInStyle(customStyle) : "";
    const heightListener = heightCorrection
        ? wrapInScript(getResizeScript_1.renderResizeScript(id, props))
        : "";
    const linkClickListener = interceptLinkClicks
        ? wrapInScript(getListenToLinksScript_1.getListenToLinksScript(id))
        : "";
    const unloadListener = preventIframeNavigation
        ? wrapInScript(getInterceptNavigationScript_1.getInterceptNavigationScript(id))
        : "";
    const customScriptTag = customScript ? wrapInScript(customScript) : "";
    const onMessageCallback = react_1.useCallback((event) => {
        let messageId = "";
        let providedId = "";
        let messageType = "";
        let payload = "";
        // If no data is provided, return
        if (!event.data) {
            return;
        }
        try {
            [messageId, providedId, messageType, payload] = JSON.parse(event.data).split("///");
        }
        catch (e) { }
        // if this message has been triggered by anything else, ignore it
        if (messageId !== constants_1.POST_MESSAGE_IDENTIFIER) {
            return;
        }
        // if the iframe id doesn't match the one from this instance, ignore it
        if (Number(providedId) !== id) {
            return;
        }
        // all good, set it.
        if (messageType === constants_1.HEIGHT_MESSAGE) {
            // payload as height
            return setHeight(Number(payload));
        }
        if (messageType === constants_1.LINK_CLICK_MESSAGE && interceptLinkClicks) {
            if (customLinkClickCallback) {
                // payload as url string
                return customLinkClickCallback(payload);
            }
            return onLinkMessagePosted(payload);
        }
        if (messageType === constants_1.NAVIGATION_INTERCEPTED_MESSAGE &&
            preventIframeNavigation) {
            return setIframeUnloadPreventState({
                preventing: false,
                buffering: true,
            });
        }
    }, [iframeUnloadPreventState]);
    react_1.useEffect(() => {
        // Add listener on mount
        window.addEventListener("message", onMessageCallback);
        if (iframeUnloadPreventState.buffering) {
            setTimeout(() => {
                setIframeUnloadPreventState({
                    preventing: true,
                    buffering: false,
                });
            }, 300);
        }
        // Remove listener on unmount
        return () => window.removeEventListener("message", onMessageCallback);
    }, [onMessageCallback]);
    // This logic is here to prevent the iframe to show the "iframe is navigating away" view
    // on page unload.
    // There's a block in the main useEffect that will re-set the 'buffering'
    // to false automatically after a number of milliseconds
    if (iframeUnloadPreventState.buffering) {
        return react_1.default.createElement("div", { style: { height }, "data-buffering": "" });
    }
    if (iframeUnloadPreventState.preventing) {
        if (customIframeNavigationInterceptedView) {
            return customIframeNavigationInterceptedView;
        }
        return (react_1.default.createElement("div", { style: {
                height: 300,
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                border: "5px solid #ccc",
                justifyContent: "center",
            } },
            react_1.default.createElement("p", null, "This iframe is trying to navigate away."),
            react_1.default.createElement("button", { type: "button", onClick: () => setIframeUnloadPreventState({
                    preventing: false,
                    buffering: false,
                }) }, "Reload")));
    }
    return (react_1.default.createElement("iframe", { style: Object.assign({ border: "none", width: "100%" }, customOuterStyleObject), sandbox: "allow-scripts", src: "data:text/html", title: title, srcDoc: `${unloadListener}${parentStyleTags}${styleTag}${sanitizedHtml || ""}${heightListener}${linkClickListener}${customScriptTag}`, height: height }));
};
exports.SeamlessIframe = SeamlessIframe;
SeamlessIframe.defaultProps = {
    heightCorrection: true,
    heightCorrectionOnResize: true,
    debounceResizeTime: 250,
    inheritParentStyle: true,
    customStyle: `
    body {
      margin: 0;
      padding: 0;
    }
  `,
    customOuterStyleObject: {},
    listenToLinkClick: false,
    preventIframeNavigation: false,
    title: "",
};
